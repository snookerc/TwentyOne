@page "/game"

@using System.Drawing;
@using TwentyOne.Services;
@using TwentyOne.Models;
@using TwentyOne.Pages.Partials;
@inject IJSRuntime jsRuntime
@inject CardDeck cardDeck

<PageTitle>Twenty One</PageTitle>

<audio id="CardShuffle"><source src="/sounds/CardShuffle1.mp3" /></audio>
<audio id="CardFlip"><source src="/sounds/CardFlip1.mp3" /></audio>

<h1>Twenty One</h1>
<div>
    <br />
</div>
<div class="cardcontainer">
    <div class="one">
        <img class="blackjack-drawdeck" src="@($"images/decks/default/{cardInStack.GetImageNameForBack}")" />
        <img class="blackjack-drawdeck" src="@($"images/decks/default/{cardInStack.GetImageNameForBack}")" />
        <img class="blackjack-drawdeck" src="@($"images/decks/default/{cardInStack.GetImageNameForBack}")" />
        <img class="blackjack-drawdeck" src="@($"images/decks/default/{cardInStack.GetImageNameForBack}")" />
    </div>

    @if (dealerHand != null)
    {
        @foreach (var card in dealerHand.Cards)
        {
            <CardPartialView card="card" />
        }
    }
    else
    {
        <div class="one"></div>
    }
</div>

<div id="DealerPlayerSeparator">
    <div><hr class="hrseparator" /></div>
    <div class="dealerseparatorparent">
        <div class="dealerseparatorchild">Dealer must stand on 17 and draw to 16</div>
    </div>
    <div><hr class="hrseparator" /></div>
</div>

<div class="cardcontainer">
    @if (dealerHand != null)
    {
        @foreach (var card in playerHand.Cards)
        {
            <CardPartialView card="card" />
        }
    }
</div>

<div>
    <br />
</div>

<div style="align-content:center;justify-content:center;display:flex;">
    <br />
    <br />
    <MudButton id="newGameButton" Variant="Variant.Filled" Style="background-color:gold" hidden=@HideButtons Disabled=@IsLoading @onclick="Deal">New Game</MudButton>
    &nbsp;
    <MudButton id="hitMeButton" Variant="Variant.Filled" Style="background-color:gold" hidden=@HideButtons Disabled=@IsLoading @onclick="HitMe">Hit Me!</MudButton>
    &nbsp;
    <MudButton id="standButton" Variant="Variant.Filled" Style="background-color:gold" hidden=@HideButtons Disabled=@IsLoading @onclick="Stand">Stand</MudButton>
</div>

@code {
    private bool IsLoading = false;
    private bool HideButtons = false;
    private TwentyOneGameService twentyOneGameService = new TwentyOneGameService();
    private Card cardInStack;

    private Hand dealerHand;
    private Hand playerHand;

    protected override async Task OnInitializedAsync()
    {
        dealerHand = new Hand(cardDeck);
        playerHand = new Hand(cardDeck);

        cardInStack = new Card(1, Card.CardBackNumber);

        HideButtons = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        //TODO:  this doesn't work.  is there a "before render"?
        if (firstRender)
        {
            await Deal();
        }
    }

    private async Task Deal()
    {
        IsLoading = true;
        HideButtons = true;

        cardDeck.NewDeal();

        dealerHand = new Hand(cardDeck);
        playerHand = new Hand(cardDeck);

        await jsRuntime.InvokeAsync<string>("PlaySound", "/sounds/CardShuffle1.mp3");

        dealerHand = new Hand(cardDeck, 2);

        //await jsRuntime.InvokeAsync<string>("PlaySound", "/sounds/CardFlip1.mp3");
        playerHand = new Hand(cardDeck, 2);

        IsLoading = false;
        HideButtons = false;
    }

    private async Task HitMe()
    {
        IsLoading = true;
        await jsRuntime.InvokeAsync<string>("PlaySound", "/sounds/CardFlip1.mp3");
        twentyOneGameService.PlayerTurn(playerHand);
        IsLoading = false;
    }

    private async Task Stand()
    {
        IsLoading = true;
        await jsRuntime.InvokeAsync<string>("PlaySound", "/sounds/CardFlip1.mp3");
        twentyOneGameService.ComputerTurn(dealerHand);
        IsLoading = false;
    }

}