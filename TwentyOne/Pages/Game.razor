@page "/game"

@using System.Drawing;
@using TwentyOne.Services;
@using TwentyOne.Models;
@using TwentyOne.Pages.Partials;
@inject IJSRuntime jsRuntime
@inject CardDeck cardDeck
@inject IDialogService DialogService

<PageTitle>Twenty One</PageTitle>

<audio id="CardShuffle"><source src="/sounds/CardShuffle1.mp3" /></audio>
<audio id="CardFlip"><source src="/sounds/CardFlip1.mp3" /></audio>

<h1>Twenty One</h1>
<div>
    <div style="position:center;">
        <img class="card-image" src="@($"images/decks/default/deck.jpg")" />
    </div>
    <br />
</div>
<div class="player-heading">Dealer</div>
<div class="player-score">@(dealerHand?.Score.ToString())<br /></div>
<br />
<div class="cardcontainer">
    @if (dealerHand != null)
    {
        @foreach (var card in dealerHand.Cards)
        {
            <CardPartialView card="card" />
        }
    }
    else
    {
        <div class="one"></div>
    }
</div>

<div id="DealerPlayerSeparator">
    <div><hr class="hrseparator" /></div>
    <div class="dealerseparatorparent">
        <div class="dealerseparatortext">Dealer must stand on 17 and draw to 16</div>
    </div>
    <div><hr class="hrseparator" /></div>
</div>

<div class="player-heading">Player</div>
<div class="@(playerHand.IsBust ? "player-score-error" : "player-score")">@(playerHand?.Score.ToString())<br /></div>
<br />
<div class="cardcontainer">
    @if (playerHand != null)
    {
        @foreach (var card in playerHand.Cards)
        {
            <CardPartialView card="card" />
        }
        @if (playerHand.IsBust)
        {
            <div class="overlay2">BUST!</div>
        }
    }
</div>

<div>
    <br />
</div>

<div style="align-content:center;justify-content:center;display:flex;">
    <br />
    <br />
    <MudButton id="newGameButton" Variant="Variant.Filled" Style="background-color:gold" hidden=@HideNewGameButton Disabled=@IsLoading @onclick="NewGame">New Game</MudButton>
    &nbsp;
    <MudButton id="hitMeButton" Variant="Variant.Filled" Style="background-color:gold" hidden=@HidePlayerButtons Disabled=@IsLoading @onclick="HitMe">Hit Me!</MudButton>
    &nbsp;
    <MudButton id="standButton" Variant="Variant.Filled" Style="background-color:gold" hidden=@HidePlayerButtons Disabled=@IsLoading @onclick="Stand">Stand</MudButton>
</div>

@code {
    private bool IsLoading = false;
    private bool HideNewGameButton = false;
    private bool HidePlayerButtons = false;

    private TwentyOneGameService twentyOneGameService = new TwentyOneGameService();

    private Hand dealerHand;
    private Hand playerHand;

    protected override async Task OnInitializedAsync()
    {
        dealerHand = new Hand(cardDeck);
        playerHand = new Hand(cardDeck);

        HidePlayerButtons = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        //TODO:  this doesn't work.  is there a "before render"?
        //if (firstRender)
        //{
        //    await NewGame();
        //}
    }

    private async Task NewGame()
    {
        IsLoading = true;
        HidePlayerButtons = true;
        HideNewGameButton = true;

        cardDeck.NewDeal();

        dealerHand = new Hand(cardDeck);
        playerHand = new Hand(cardDeck);

        await jsRuntime.InvokeAsync<string>("PlaySound", "/sounds/CardShuffle1.mp3");

        dealerHand = new Hand(cardDeck, 2);

        //await jsRuntime.InvokeAsync<string>("PlaySound", "/sounds/CardFlip1.mp3");
        playerHand = new Hand(cardDeck, 2);

        IsLoading = false;
        HidePlayerButtons = false;
        HideNewGameButton = false;
    }

    private async Task HitMe()
    {
        IsLoading = true;
        await jsRuntime.InvokeAsync<string>("PlaySound", "/sounds/CardFlip1.mp3");
        twentyOneGameService.PlayerTurn(playerHand);
        if (playerHand.IsBust)
        {
            HidePlayerButtons = true;
        };
        IsLoading = false;
    }

    private async Task Stand()
    {
        HidePlayerButtons = true;
        HideNewGameButton = true;

        string endOfGameMessage;

        await jsRuntime.InvokeAsync<string>("PlaySound", "/sounds/CardFlip1.mp3");
        twentyOneGameService.ComputerTurn(dealerHand);

        if (dealerHand.Score > playerHand.Score || playerHand.IsBust)
        {
            endOfGameMessage = "Dealer wins";
        }
        else if (dealerHand.Score < playerHand.Score || dealerHand.IsBust)
        {
            endOfGameMessage = "You win!";
        }
        else
        {
            endOfGameMessage = "It's a draw!";
        }

        HideNewGameButton = false;

        OpenDialog(endOfGameMessage);
    }

    private void OpenDialog(string message)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<Dialog>(message, options);
    }

}